#!/bin/bash -eu

# cleanliness is next to godliness
cleanup() {
  set +e
  rm -rf $boneyard
  set -e
} 2>/dev/null
#trap "cleanup" EXIT                         # when it's really cooked, we can turn this on

warn() { echo "$@" >&2; }
die() { echo "$@" >&2; exit -1; }
timestamp() { date +%T; }

# the usual cmdline arg stuff
handle_args() {
  usage="usage: $0 week# [week# ...]"        # e.g., "git odb-size {300..315}"
  week_nums="$*"
  [[ "$week_nums" ]] || die $usage           # require an argument, don't default
}

# start with a clean slate
initialize() {
  PS4='[ \t ] '
  cd $dig
    git tag -d $(git tag -l piton*) &>/dev/null    # remove all old tags
    if git remote -v | grep -q boneyard; then      # hackaround for bad "git remote" design decision
      git remote set-url boneyard $boneyard        # change old setting for remote
    else
      git remote add boneyard $boneyard            # use $boneyard as the remote
    fi
  cd ~-
  rm -rf $boneyard                                 # remove the old $boneyard
}

# report whatever measure we're using
measure() {
  # du -sh $1/objects
  git -C $1 count-objects -v | grep -F -- -pack: | perl -pe 's/\n/ /'  # use git count-objects for now
  echo                                                                 # force a newline
}

# name the points in time we want to measure
set_pitons() {
  cd $dig
    for i in $*; do
      piton_sha1=$(git log -1 --before="$i weeks ago" | perl -lane 'print if s/^commit //') # last commit before $i weeks ago
      [[ "$piton_sha1" ]] && git tag -f piton/$i $piton_sha1                                # stake down a name, like "piton/100" for 100 weeks ago
    done
  cd ~-
}

# all the preliminaries
: ${dig:=~/Digs/source}                                     # default to analyzing the "source" repo
boneyard=$dig.git                                           # should be in /tmp. Here for debugging.
handle_args "$@"
initialize
set_pitons $week_nums

# now for the real work
for i in $week_nums; do
  cleanup
  warn [ $(timestamp) ] starting week $i                    # debugging timing info
  git init --quiet --bare $boneyard                         # make a new boneyard
  git -C $dig push -q boneyard piton/$i:master              # fill it only up to the piton
  printf "[ $i weeks ago ] "                                # report the size of the boneyard
  measure $boneyard
done

warn [ $(timestamp) ] all done                            # debugging timing info
